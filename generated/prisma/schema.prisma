generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

model User {
  id String @id @default(uuid())

  email String @unique

  project ProjectMembership[]

  password String
  roles    UserRole @default(USER)
  name     String

  projects Project[] @relation("UserProjects")

  notifications Notification[]

  createdAt DateTime  @default(now())
  Session   Session[]
  Task      Task[]

  AuditLog AuditLog[]
}

model AuditLog {
  id         String      @id @default(uuid())
  action     AuditAction
  entityType EntityType
  entityId   String
  userId     String
  oldData    Json?
  newData    Json?
  createdAt  DateTime    @default(now())
  User       User        @relation(fields: [userId], references: [id])
}

model Project {
  id String @id @default(uuid())

  name String

  members ProjectMembership[]

  owner User @relation("UserProjects", fields: [ownerId], references: [id])

  ownerId String

  createdAt DateTime @default(now())
  Task      Task[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Task {
  id            String         @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus     @default(TODO)
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  attachment    String?
  assignee      User?          @relation(fields: [assigneeID], references: [id])
  assigneeID    String?
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProjectMembership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      UserRole
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  type      String
  read      Boolean  @default(false)
  userId    String
  taskId    String?
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum EntityType {
  PROJECT
  TASK
}
